replicaCount: 1
deploymentStrategy:
  type: Recreate

imagePullSecrets: []

image:
  repository: netdata/netdata
  tag: "{{ .Chart.AppVersion }}"
  pullPolicy: Always

sd:
  image:
    repository: netdata/agent-sd
    tag: v0.2.3
    pullPolicy: Always
  child:
    enabled: true
    configmap:
      name: netdata-child-sd-config-map
      key: config.yml
      # if 'from' is {} the ConfigMap is not generated
      from:
        file: sdconfig/child.yml
        value: {}
    resources:
      limits:
        cpu: 50m
        memory: 150Mi
      requests:
        cpu: 50m
        memory: 100Mi

initContainersImage:
  repository: alpine
  tag: latest
  pullPolicy: Always

sysctlInitContainer:
  enabled: false
  command: []
  resources: {}

service:
  type: ClusterIP
  port: 19999
  annotations: {}
  ## Only to be used with type LoadBalancer
  # loadBalancerIP: 10.0.1.69
  # loadBalancerSourceRanges: []
  # externalTrafficPolicy: Local
  ## Only to be used with type LoadBalancer and external traffic policy Local
  # healthCheckNodePort:
  ## Only to be used with type ClusterIP
  # clusterIP: 10.1.2.3

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  path: /
  pathType: Prefix
  hosts:
    - netdata.k8s.local
  ## whole spec is going to be included into ingress spec.
  ## if you intend to use ingressClassName declaration, remove ingress.class from annotations
  # spec:
  #   ingressClassName: nginx
  # tls:
  #   - secretName: netdata-tls
  #     hosts:
  #       - netdata.k8s.local

rbac:
  create: true
  pspEnabled: true

serviceAccount:
  create: true
  name: netdata


parent:
  port: 19999
  resources: {}
    # limits:
    #  cpu: 4
    #  memory: 4096Mi
    # requests:
    #  cpu: 4
    #  memory: 4096Mi

  livenessProbe:
    failureThreshold: 3
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1

  terminationGracePeriodSeconds: 300

  nodeSelector: {}

  tolerations: []

  affinity: {}

  priorityClassName: ""

  env: {}
    ## To disable anonymous statistics:
    # DO_NOT_TRACK: 1

  envFrom: []
    ## E.g. to read Netdata Cloud claim token from an existing secret "netdata" set this to:
    # - secretRef:
    #     name: netdata
    ## And create it with: kubectl create secret generic netdata --from-literal="NETDATA_CLAIM_TOKEN=<token>"
    ## Also ensure that claim.token is empty

  podLabels: {}

  podAnnotations: {}

  dnsPolicy: Default

  database:
    persistence: true
    ## Set '-' as the storageclass to get a volume from the default storage class.
    storageclass: "-"
    volumesize: 2Gi

  alarms:
    persistence: true
    ## Set '-' as the storageclass to get a volume from the default storage class.
    storageclass: "-"
    volumesize: 1Gi

  configs:
    netdata:
      enabled: true
      path: /etc/netdata/netdata.conf
      data: |
        [global]
          memory mode = dbengine

        [plugins]
          cgroups = no
          tc = no
          enable running new plugins = no
          check for new plugins every = 72000
          python.d = no
          charts.d = no
          go.d = no
          node.d = no
          apps = no
          proc = no
          idlejitter = no
          diskspace = no
    stream:
      enabled: true
      path: /etc/netdata/stream.conf
      data: |
        [11111111-2222-3333-4444-555555555555]
          enabled = yes
          history = 3600
          default memory mode = dbengine
          health enabled by default = auto
          allow from = *
    health:
      enabled: true
      path: /etc/netdata/health_alarm_notify.conf
      data: |
        SEND_EMAIL="NO"
        SEND_SLACK="YES"
        SLACK_WEBHOOK_URL=""
        DEFAULT_RECIPIENT_SLACK=""
        role_recipients_slack[sysadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[domainadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[dba]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[webmaster]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[proxyadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[sitemgr]="${DEFAULT_RECIPIENT_SLACK}"
    exporting:
      enabled: false
      path: /etc/netdata/exporting.conf
      data: ""
    example:
      enabled: false
      path: /etc/netdata/health.d/example.conf
      data: |
        alarm: example_alarm1
          on: example.random
        every: 2s
        warn: $random1 > (($status >= $WARNING)  ? (70) : (80))
        crit: $random1 > (($status == $CRITICAL) ? (80) : (90))
        info: random
          to: sysadmin

  claiming:
    enabled: false
    token: ""
    rooms: ""
    url: "https://app.netdata.cloud"

child:
  enabled: true
  port: "{{ .Values.parent.port }}"

  updateStrategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxUnavailable: 1

  resources: {}
    # limits:
    #  cpu: 4
    #  memory: 4096Mi
    # requests:
    #  cpu: 4
    #  memory: 4096Mi

  livenessProbe:
    failureThreshold: 3
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1

  terminationGracePeriodSeconds: 30

  nodeSelector: {}

  tolerations:
    - operator: Exists
      effect: NoSchedule

  affinity: {}

  priorityClassName: ""

  podLabels: {}

  podAnnotationAppArmor:
    enabled: true

  podAnnotations: {}

  hostNetwork: true

  dnsPolicy: ClusterFirstWithHostNet

  persistence:
    enabled: true
    hostPath: /var/lib/netdata-k8s-child

  configs:
    netdata:
      enabled: true
      path: /etc/netdata/netdata.conf
      data: |
        [global]
          memory mode = ram
        [health]
          enabled = no
    stream:
      enabled: true
      path: /etc/netdata/stream.conf
      data: |
        [stream]
          enabled = yes
          destination = netdata:{{ .Values.service.port }}
          api key = 11111111-2222-3333-4444-555555555555
          timeout seconds = 60
          buffer size bytes = 1048576
          reconnect delay seconds = 5
          initial clock resync iterations = 60
    exporting:
      enabled: false
      path: /etc/netdata/exporting.conf
      data: ""
    go.d:
      enabled: true
      path: /etc/netdata/go.d.conf
      data: |
        modules:
          pulsar: no
          prometheus: yes
    kubelet:
      enabled: true
      path: /etc/netdata/go.d/k8s_kubelet.conf
      data: |
        update_every: 1
        autodetection_retry: 0
        jobs:
          - url: http://127.0.0.1:10255/metrics
          - url: https://localhost:10250/metrics
            tls_skip_verify: yes
    kubeproxy:
      enabled: true
      path: /etc/netdata/go.d/k8s_kubeproxy.conf
      data: |
        update_every: 1
        autodetection_retry: 0
        jobs:
          - url: http://127.0.0.1:10249/metrics

  env: {}
    ## To disable anonymous statistics:
    # DO_NOT_TRACK: 1

  envFrom: []
    ## E.g. to read Netdata Cloud claim token from an existing secret "netdata" set this to:
    # - secretRef:
    #     name: netdata
    ## And create it with: kubectl create secret generic netdata --from-literal="NETDATA_CLAIM_TOKEN=<token>"
    ## Also ensure that claim.token is empty

  claiming:
    enabled: false
    token: ""
    rooms: ""
    url: "https://app.netdata.cloud"
